.row {
  min-width: 100%;
  @include respond-to(small) {
    display: flex;
    flex-wrap: nowrap;
  }
    &.justify-content--flex-end {
        justify-content: flex-end;
    }
    &.justify-content--center {
        justify-content: center;
    }
    &.justify-content--space-between {
        justify-content: space-between;
    }
    &.justify-content--space-around {
        justify-content: space-around;
    }
    &.align-items--flex-start {
        align-items: flex-start;
    }
    &.align-items--flex-end {
        align-items: flex-end;
    }
    &.align-items--center {
        align-items: center;
    }
    &.align-items--baseline {
        align-items: baseline;
    }
    &.align-content--flex-start {
        align-content: flex-start;
    }
    &.align-content--flex-end {
        align-content: flex-end;
    }
    &.align-content--center {
        align-content: center;
    }
    &.align-content--space-between {
        align-content: space-between;
    }
    &.align-content--space-around {
        align-content: space-around;
    }
    &.flex-flow--row-wrap {
      flex-flow: row wrap;
    }
    &.flex-flow--row-nowrap {
      flex-flow: row nowrap;
    }
    &.flex-flow--column-wrap {
      flex-flow: column wrap;
    }
    &.flex-flow--column-nowrap {
      flex-flow: column nowrap;
    }

    &.has-wrap {
      flex-wrap: wrap;
    }
}

.column {
  flex: 1;
  flex-basis: 0;
  flex-grow: 1;
  flex-shrink: 1;
  @for $i from 1 through $grid-columns {
    $distance: ($i / $grid-columns) * 100%;
    &.is-#{$i} {
      @include respond-to(small) {
        flex: none;
        width: $distance;
      }
    }
    &.is-offset-#{$i} {
      @include respond-to(small) {
        margin-left: $distance;
      }
    }
  }
  img {
    max-width: 100%;
    height: auto;
  }
  &.is-half {
    flex: none;
    width: 50%;
  }
  &.is-offset-half {
    margin-left: 50%;
  }
  &.is-one-third {
    flex: none;
    width: calc(100%/3);
  }
  &.is-offset-one-third {
    margin-left: 50%;
  }
  &.is-two-thirds {
    flex: none;
    width: calc(100%/1.5);
  }
  &.is-offset-two-thirds {
    margin-left: 50%;
  }
}

.row.has-gutters {
  .column {
    @for $i from 1 through $grid-columns {
      $width: (($i / $grid-columns) * 100%);
      &.is-#{$i} {
        @include respond-to(small) {
          width: calc(#{$width} - (#{$grid-gutter} * 2));
          margin-left: $grid-gutter;
          margin-right: $grid-gutter;
          &:first-child {
            margin-left: 0;
          }
          &:last-child {
            margin-right: 0;
          }
        }
      }
      &.is-offset-#{$i} {
        margin-left: calc(#{$width} - (#{$grid-gutter} * 2));
      }
    }
    &.is-half {
      @extend .column.is-half;
      margin-left: $grid-gutter;
      margin-right: $grid-gutter;
      &:first-child {
        margin-left: 0;
      }
      &:last-child {
        margin-right: 0;
      }
    }
    &.is-one-third {
      flex: none;
      width: 100%/3 - ($grid-gutter * 2);
      margin-left: $grid-gutter;
      margin-right: $grid-gutter;
      &:first-child {
        margin-left: 0;
        width: 100%/3 - ($grid-gutter);
      }
      &:last-child {
        margin-right: 0;
        width: 100%/3 - ($grid-gutter);
      }
    }
    &.is-two-thirds {
      flex: none;
      width: 100%/1.5 - ($grid-gutter * 2);
      margin-left: $grid-gutter;
      margin-right: $grid-gutter;
      &:first-child {
        margin-left: 0;
        width: 100%/1.5 - ($grid-gutter);
      }
      &:last-child {
        margin-right: 0;
        width: 100%/1.5 - ($grid-gutter);
      }
    }
  }
}
